// START OF FILE: renderer/src/components/ModelGrid.tsx

import React, { memo, useEffect, useMemo, useState } from 'react';
import { FaStar, FaRegStar } from 'react-icons/fa';
import SafeImage from './SafeImage';
import placeholderModel from '../assets/placeholder-model.png';
import useNsfwIndex from '../hooks/useNsfwIndex';
import { classifyImage } from '../lib/nsfwDetect';

export interface ModelInfo {
    model_hash: string;
    cover_image: string | null;
    file_name: string;
    base_model?: string;
    model_type?: string;
    is_favorite?: number | boolean;
    nsfw?: boolean;
    tags?: string[];
    thumbnail_path?: string;
    main_image_path?: string;
}

type Props = {
    models: ModelInfo[];
    onSelectModel: (modelHash: string) => void;
    onToggleFavorite: (modelHash: string) => void;
};

function toImgSrc(input?: string | null): string | null {
    if (!input || input.trim() === '') return null;
    const v = input.trim();
    if (v.startsWith('http://') || v.startsWith('https://') || v.startsWith('file://')) return v;
    if (/^[a-zA-Z]:[\\/]/.test(v) || v.startsWith('/')) return `file://${v}`;
    return v;
}

// Key helpers
function normalizeKey(src: string): string {
    const raw = src.startsWith('file://') ? src.slice(7) : src;
    return decodeURIComponent(raw).replace(/\\/g, '/');
}
function resolveImageFlag(getImage: (k: string) => boolean | undefined, src?: string): boolean | undefined {
    if (!src) return undefined;
    const norm = normalizeKey(src);
    const variants = new Set<string>([
        src,
        src.startsWith('file://') ? src.slice(7) : `file://${src}`,
        norm,
        norm.toLowerCase(),
    ]);
    for (const v of variants) {
        const hit = getImage(v);
        if (typeof hit === 'boolean') return hit;
    }
    return undefined;
}

const ModelCard: React.FC<{
    model: ModelInfo;
    onSelect: (hash: string) => void;
    onToggleFav: (hash: string) => void;
}> = ({ model, onSelect, onToggleFav }) => {
    const nsfwIndex = useNsfwIndex();

    const src = useMemo(() => {
        const primary = toImgSrc(model.cover_image || model.thumbnail_path || model.main_image_path || '');
        return primary ?? placeholderModel;
    }, [model.cover_image, model.thumbnail_path, model.main_image_path]);

    const isFavorite = Boolean(
        typeof model.is_favorite === 'number' ? model.is_favorite === 1 : model.is_favorite
    );

    // Lookups
    const modelFlag = nsfwIndex.getModel(model.model_hash);
    const imageFlag = src ? resolveImageFlag(nsfwIndex.getImage, src) : undefined;
    const fieldFlag =
        (typeof (model as any).nsfw === 'boolean' && (model as any).nsfw) ||
        (String((model as any).rating ?? (model as any).safety ?? '')
            .toLowerCase()
            .match(/explicit|nsfw|r-?18|xxx|18\+/) != null) ||
        undefined;

    // TRI-STATE nsfwHint: only pass TRUE when we *know* it's NSFW; otherwise undefined
    const nsfwHint = [modelFlag, imageFlag, fieldFlag].some((v) => v === true) ? true : undefined;

    // Context menu
    const [menu, setMenu] = useState<null | { x: number; y: number }>(null);
    useEffect(() => {
        if (!menu) return;
        const close = () => setMenu(null);
        const onEsc = (e: KeyboardEvent) => { if (e.key === 'Escape') setMenu(null); };
        window.addEventListener('click', close, { capture: true });
        window.addEventListener('keydown', onEsc);
        return () => {
            window.removeEventListener('click', close, { capture: true } as any);
            window.removeEventListener('keydown', onEsc);
        };
    }, [menu]);

    const handleContextMenu: React.MouseEventHandler<HTMLDivElement> = (e) => {
        e.preventDefault();
        if ((e.target as HTMLElement).closest('button')) return;
        setMenu({ x: e.clientX, y: e.clientY });
    };

    const isDark =
        typeof document !== 'undefined' &&
        document.documentElement.classList.contains('dark');

    const menuBoxStyle: React.CSSProperties = {
        position: 'fixed',
        top: menu?.y ?? 0,
        left: menu?.x ?? 0,
        zIndex: 9999,
        background: isDark ? '#111827' : '#ffffff',
        color: isDark ? '#E5E7EB' : '#111827',
        border: isDark ? '1px solid rgba(255,255,255,0.12)' : '1px solid rgba(0,0,0,0.12)',
        borderRadius: 8,
        boxShadow: isDark
            ? '0 8px 24px rgba(0,0,0,0.55)'
            : '0 8px 24px rgba(0,0,0,0.18)',
        overflow: 'hidden',
        minWidth: 160,
    };
    const itemStyle: React.CSSProperties = {
        display: 'block',
        width: '100%',
        padding: '8px 12px',
        textAlign: 'left',
        border: 'none',
        background: 'transparent',
        cursor: 'pointer',
        fontSize: 13,
    };

    return (
        <div
            className="group relative rounded-lg border border-zinc-200 dark:border-zinc-700 shadow-sm bg-white dark:bg-zinc-900 overflow-hidden hover:shadow-md transition"
            role="button"
            tabIndex={0}
            onClick={() => onSelect(model.model_hash)}
            onKeyDown={(e) => {
                if (e.key === 'Enter' || e.key === ' ') onSelect(model.model_hash);
            }}
            onContextMenu={handleContextMenu}
        >
            {/* image (3:4) */}
            <div className="relative w-full bg-zinc-100 dark:bg-zinc-800" style={{ paddingTop: '133.333%' }}>
                <div className="absolute inset-0">
                    <SafeImage
                        src={src || placeholderModel}
                        alt={model.file_name}
                        className="w-full h-full object-cover"
                        meta={model}
                        nsfwHint={nsfwHint}
                        withOverlay={true}
                        onError={(e) => {
                            const t = e.currentTarget as HTMLImageElement;
                            if (t.src !== placeholderModel) {
                                (t as any).onerror = null;
                                t.src = placeholderModel;
                            }
                        }}
                    />
                </div>

                {/* Favorite */}
                <button
                    type="button"
                    className="absolute top-2 right-2 z-40 p-1.5 rounded-full bg-black/45 hover:bg-black/60 text-white"
                    title={isFavorite ? 'Remove from favorites' : 'Add to favorites'}
                    onClick={(e) => {
                        e.stopPropagation();
                        onToggleFav(model.model_hash);
                    }}
                >
                    {isFavorite ? <FaStar className="h-4 w-4" /> : <FaRegStar className="h-4 w-4" />}
                </button>
            </div>

            {/* Meta */}
            <div className="p-3">
                <div className="text-sm font-semibold truncate text-zinc-900 dark:text-zinc-100" title={model.file_name}>
                    {model.file_name}
                </div>
                <div className="mt-1 text-xs text-zinc-600 dark:text-zinc-300 flex gap-2">
                    {model.model_type && <span className="px-1.5 py-0.5 rounded bg-zinc-100 dark:bg-zinc-800">{model.model_type}</span>}
                    {model.base_model && <span className="px-1.5 py-0.5 rounded bg-zinc-100 dark:bg-zinc-800">{model.base_model}</span>}
                </div>
            </div>

            {/* menu */}
            {menu && (
                <div style={menuBoxStyle} onClick={(e) => e.stopPropagation()} onContextMenu={(e) => e.preventDefault()}>
                    <button
                        style={itemStyle}
                        onClick={async () => {
                            await nsfwIndex.markModel(model.model_hash, true);
                            setMenu(null);
                        }}
                    >
                        Mark as NSFW
                    </button>
                    <button
                        style={{ ...itemStyle, borderTop: isDark ? '1px solid rgba(255,255,255,0.06)' : '1px solid rgba(0,0,0,0.06)' }}
                        onClick={async () => {
                            await nsfwIndex.markModel(model.model_hash, false);
                            setMenu(null);
                        }}
                    >
                        Mark as SFW
                    </button>
                    <button
                        style={{ ...itemStyle, borderTop: isDark ? '1px solid rgba(255,255,255,0.06)' : '1px solid rgba(0,0,0,0.06)' }}
                        onClick={async () => {
                            if (src) {
                                const { isNSFW } = await classifyImage(src);
                                await nsfwIndex.markImage(normalizeKey(src), isNSFW);
                                await nsfwIndex.refresh();
                            }
                            setMenu(null);
                        }}
                    >
                        Auto-detect NSFW (cover)
                    </button>
                </div>
            )}
        </div>
    );
};

const ModelGrid: React.FC<Props> = ({ models, onSelectModel, onToggleFavorite }) => {
    if (!models || models.length === 0) {
        return <div className="text-sm text-zinc-600 dark:text-zinc-300 px-2 py-6">No models found. Try changing your filters or run a scan.</div>;
    }

    return (
        <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 2xl:grid-cols-6">
            {models.map((m) => (
                <ModelCard key={m.model_hash} model={m} onSelect={onSelectModel} onToggleFav={onToggleFavorite} />
            ))}
        </div>
    );
};

export default memo(ModelGrid);

// END OF FILE: renderer/src/components/ModelGrid.tsx
